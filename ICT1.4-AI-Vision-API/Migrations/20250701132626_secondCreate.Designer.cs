// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SensoringApi.Data;

#nullable disable

namespace ICT1._4_AI_Vision_API.Migrations
{
    [DbContext(typeof(LitterDbContext))]
    [Migration("20250701132626_secondCreate")]
    partial class secondCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SensoringApi.Models.Litter", b =>
                {
                    b.Property<Guid>("litter_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("confidence")
                        .HasColumnType("float");

                    b.Property<DateTime?>("detection_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("litter_classification")
                        .HasColumnType("int");

                    b.Property<double>("location_latitude")
                        .HasColumnType("float");

                    b.Property<double>("location_longitude")
                        .HasColumnType("float");

                    b.HasKey("litter_id");

                    b.ToTable("Litter");
                });

            modelBuilder.Entity("SensoringApi.Models.Weather", b =>
                {
                    b.Property<Guid>("weather_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("conditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("humidity")
                        .HasColumnType("float");

                    b.Property<double>("temperature_celsius")
                        .HasColumnType("float");

                    b.HasKey("weather_id");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("SensoringApi.Models.Weather", b =>
                {
                    b.HasOne("SensoringApi.Models.Litter", null)
                        .WithOne("weather")
                        .HasForeignKey("SensoringApi.Models.Weather", "weather_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SensoringApi.Models.Litter", b =>
                {
                    b.Navigation("weather");
                });
#pragma warning restore 612, 618
        }
    }
}
